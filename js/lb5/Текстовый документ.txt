
#include  "Generator.h"

#include "stdafx.h"
#include <stack>
using namespace std;

namespace Gener// генерация кода в assembler
{
	
	static int conditionnum = 0;
	bool condition = false;
	int conditOmount = 0;

	string itoS(int x) {
		char p[1000];
		_itoa(x, p, 10);
		return string(p);
	}// int в string

string genCallFuncCode(LT::LexTable& lextable, IT::IdTable& idtable, int g)// получить вызов функции
{
	string str;// строковый буфер
	stack<IT::Entry> temp;
	IT::Entry e = ITENTRY(g);// идентификатор вызываемой функции
	stack<LT::Entry> stack;
	
//	bool stnd = (e.idtype == IT::IDTYPE::S);
	 
	for (int j = g; LEXEMA(j) != LEX_SEMICOLON; j++)
	{
		if (LEXEMA(j) == LEX_ID || LEXEMA(j) == LEX_LITERAL ) //|| LEXEMA(j) == LEX_LITERAL_NUMO
			temp.push(ITENTRY(j));// заполняем стек в прямом порядке
	}
	//str += "\n";

	while (!temp.empty())// раскручиваем стек
	{
		if (temp.top().idtype == IT::IDTYPE::L && temp.top().iddatatype == IT::IDDATATYPE::STR)
			str = str + "push offset " + temp.top().id + "\n";
		else str = str + "push " + temp.top().id + "\n";
		temp.pop();
	}

	//if (stnd)// подключение библиотечных функций
		//str += "push offset buffer\n";
	str = str + "call " + string(e.id) + IN_CODE_ENDL;

	return str;
}

string genEqualCode(LT::LexTable& lextable, IT::IdTable& idtable, int i)// функция генерации кода в asm
{
	string str;
	IT::Entry e1 = ITENTRY(i-1); // левый операнд

	switch (e1.iddatatype)
	{
	case IT::IDDATATYPE::INT:// идентификатор - число
	{
		bool first = true;
	 for (int j = i + 1; LEXEMA(j) != LEX_SEMICOLON; j++)//for (int j = i + 1; LEXEMA(j) != LEX_SEMICOLON || LEXEMA(j+1) != ' '; j++)
		{
			switch (LEXEMA(j))
			{
			case LEX_LITERAL:
			case LEX_ID:
			case LEX_FUNCTION:
			{
				if (ITENTRY(j).idtype == IT::IDTYPE::F || ITENTRY(j).idtype == IT::IDTYPE::S) // если в выражении вызов функции
				{
					str = str + genCallFuncCode(lextable, idtable, j); // функция возвращает результат в eax
					str = str + "push eax\n"; // результат выражения в стек для дальнейшего вычисления выражения
					while (LEXEMA(j) != LEX_RIGHTHESIS) j++; //POLISH LEX_SEMICOLON
				
					break;
				}
				
				else str = str + "push " + ITENTRY(j).id + "\n";
				break;
			}
			
			case LEX_PLUS:
				str = str + "pop ebx\npop eax\nadd eax, ebx\npush eax\n"; break;
			case LEX_MINUS:
				str = str + "pop ebx\npop eax\nsub eax, ebx\npush eax\n"; break;
			case LEX_STAR:
				str = str + "pop ebx\npop eax\nimul eax, ebx\npush eax\n"; break;
			case LEX_DIRSLASH:// деление нацело
				str = str + "pop ebx\npop eax\ncdq\nidiv ebx\npush eax\n"; break;
			//case LEX_MOD:// остаток от деления
			//	str = str + "pop ebx \nmov edx, 0 \npop eax \nidiv ebx \npush edx \nmov eax, edx\n"; break;
			//case LEX_RIGHT:// сдвиг вправо
			//	str = str + "pop ebx \npop eax \nmov cl, bl \nshr eax, cl\npush eax\n"; break;
			//case LEX_LEFT:// сдвиг влево
			//	str = str + "pop ebx \npop eax \nmov cl, bl \nshl eax, cl\npush eax\n"; break;
			}
		} // цикл вычисления

		str = str + "\npop ebx\nmov " + e1.id + ", ebx\n";// вычисленное выражение в ebx
		break;
	}
	case IT::IDDATATYPE::STR:// разрешить присваивать строкам только строки, литералы и вызовы функций
	{
		char lex = LEXEMA(i + 1);
		IT::Entry e2 = ITENTRY(i + 1);
		if (lex == LEX_ID && (e2.idtype == IT::IDTYPE::F || e2.idtype == IT::IDTYPE::S)) // вызов функции
		{
			//str += genCallFuncCode(tables, log, i + 1);
			str = str + "mov " + e1.id + ", eax";
		}
	
		else if (lex == LEX_LITERAL)// литерал
			str = str + "mov " + e1.id + ", offset " + e2.id;
		else// идентификатор (переменная) - через регистр
			str = str + "mov ecx, " + e2.id + "\nmov " + e1.id + ", ecx";
	}
	}

	return str;
}

//string genFunctionCode(Lexer::LEX& tables, int i, string funcname, int pcount)
//{
//	string str;
//	IT::Entry e = ITENTRY(i + 1);
//	IT::IDDATATYPE type = e.iddatatype;

//	str = SEPSTR(funcname) + string(e.id) + string(" PROC,\n\t");
//	int j = i + 3;// начало - то что сразу после открывающей скобки
//	while (LEXEMA(j) != LEX_RIGHTTHESIS) // пока параметры не кончатся
//	{
//		if (LEXEMA(j) == LEX_ID)// параметр
//			str = str + string(ITENTRY(j).id) + (ITENTRY(j).iddatatype == IT::IDDATATYPE::NUM ? " : sdword, " : " : dword, ");
//		j++;
//	}
//	int f = str.rfind(',');
//	if (f > 0)
//		str[f] = IN_CODE_SPACE;

//	str += "\n; -------- save registers -------\npush ebx\npush edx\n; -------------------------------";

//	return str;
//}

//string genExitCode(Lexer::LEX& tables, int i, string funcname, int pcount)
//{
//	string str = "; ------ restore registers ------\npop edx\npop ebx\n; -------------------------------\n";
//	if (LEXEMA(i + 1) != LEX_SEPARATOR)// выход из функции (вернуть значение)
//		str = str + "mov eax, " + string(ITENTRY(i + 1).id) + "\n";
//	str += "ret\n";
//	str += funcname + " ENDP" + SEPSTREMP;
//	return str;
//}

string genConditionCode(LT::LexTable& lextable, IT::IdTable& idtable,int i, string& cyclecode)// оператор условия (if)
{
	string str;
	conditionnum++;
	cyclecode.clear();
	IT::Entry rgt;
	IT::Entry lft = ITENTRY(i + 2); // левый операнд
	if (lextable.table[i+4].idxTI != LT_TI_NULLIDX) // правый операнд для ><
	 rgt = ITENTRY(i + 4);
	else
	 rgt = ITENTRY(i + 5); // правый операнд
	
	
	bool w = false, r = false, c = false;
	string wstr, rstr;

	//for (int j = i + 5; LEXEMA(j) != LEX_LEFTBRACE; j++) // пропустили открывающую решетку
	//{
	//	if (LEXEMA(j) == LEX_ISTRUE) r = true;
	//	if (LEXEMA(j) == LEX_ISFALSE) w = true;
	//	if (LEXEMA(j) == LEX_CYCLE) c = true;
	//}
	str = str + "mov edx, " + lft.id + "\ncmp edx, " + rgt.id + "\n";

	switch (LEXEMA(i + 3))// переходы по меткам
	{
	case LEX_MORE: rstr = "jg"; wstr = "jl"; break;
	case LEX_LESS: rstr = "jl"; wstr = "jg"; break;
	/*case LEX_EQUALS: rstr = "jz"; wstr = "jnz"; break;
	case LEX_NOTEQUALS: rstr = "jnz"; wstr = "jz"; break;*/
	}
	str = str + "\n" + rstr + " right" + to_string(conditOmount);
	str = str + "\n" + wstr + " wrong" + to_string(conditOmount);

	//if (!c && r) str = str + "\n" + rstr + " right" + itoS(conditionnum);
	//if (!c && w) str = str + "\n" + wstr + " wrong" + itoS(conditionnum);
	//if (c)
	//{
	//	str = str + "\n" + rstr + " cycle" + itoS(conditionnum);// генерация кода цикла (while)
	//	cyclecode = str;
	//	str = str + "\njmp cyclenext" + itoS(conditionnum);
	//}
	//else if (!r || !w) str = str + "\njmp next" + itoS(conditionnum);
	return str;
}

	vector <string> startFillVector(IT::IdTable& idtable)	//заполнение вектора
	{
		vector <string> v;
		v.push_back(BEGIN);
		v.push_back(EXTERN);

		vector <string> vlt;  vlt.push_back(CONST);
		vector <string> vid; ; vid.push_back(DATA);

		for (int i = 0; i < idtable.size; i++)// const, data
		{
			IT::Entry e = idtable.table[i];
			string str = "\t\t" + string(e.id);

			if (idtable.table[i].idtype == IT::IDTYPE::L)// литерал - в .const
			{
				switch (e.iddatatype)
				{
				case IT::IDDATATYPE::STR: str = str + " byte '" + string(idtable.table[i].value.vstr->str) + "', 0"; break;
				case IT::IDDATATYPE::INT: str = str + " sdword " + itoS(e.value.vint); break;
				}
				vlt.push_back(str);
			}
			else if (idtable.table[i].idtype == IT::IDTYPE::V)// переменная - в .data
			{
				switch (e.iddatatype)
				{
				case IT::IDDATATYPE::INT: str = str + " sdword 0"; break;
				case IT::IDDATATYPE::STR: str = str + " dword ?"; break;
				}
				vid.push_back(str);
			}
		}

		v.insert(v.end(), vlt.begin(), vlt.end());// заполнение в вектор
		v.insert(v.end(), vid.begin(), vid.end());
		v.push_back(CODE);
		return v;
	}

	void CodeGeneration(LT::LexTable& lextable, IT::IdTable& idtable)// генерация
	{
		vector <string> v = startFillVector(idtable);
		ofstream ofile("..\\astmbler\\asm.asm");
		string funcname;// имя текущей функции
		string cyclecode;// эпилог цикла: cmp + j
		int pcount;// количество параметров текущей функции
		string str;

		for (int i = 0; i < lextable.size; i++)
		{
			switch (LEXEMA(i))// вызов вышеописанных функций в соответствии с таблицой лексем
			{
			case LEX_MAIN:// вход в main
			{
				str = str + SEPSTR("MAIN") + "main PROC";
				break;
			}
			//case LEX_FUNCTION:// вызов функции и передача параметров
			//{
			//	funcname = ITENTRY(i + 1).id;
			//	pcount = ITENTRY(i + 1).value.params.count;
			//	str = genFunctionCode(tables, i, funcname, pcount);
			//	break;
			//}
			//case LEX_RETURN:// возвращение значения функции
			//{
			//	str = genExitCode(tables, i, funcname, pcount);
			//	break;
			//}
			//case LEX_ID:// вызов функции
			//{
			//	if (LEXEMA(i + 1) == LEX_LEFTHESIS && LEXEMA(i - 1) != LEX_FUNCTION)
			//		str = genCallFuncCode(tables, log, i);
			//	break;
			//}
		
			
			//case LEX_DIEZ:// поставить метки в конце критерия
			//{
			//	if (LEXEMA(i - 1) == LEX_BRACELET)// ]#
			//	{
			//		bool c = false;
			//		for (int j = i; j > 0 && LEXEMA(j) != LEX_CONDITION; j--)
			//			if (LEXEMA(j) == LEX_CYCLE)
			//				c = true;
			//		if (c)
			//			str = cyclecode + "\ncyclenext" + itoS(conditionnum) + ":";
			//		else str += "next" + itoS(conditionnum) + ":";
			//	}
			//	break;
			//}
			//case LEX_ISTRUE:// условие верно (переход по метке)
			//{
			//	str = str + "right" + itoS(conditionnum) + ":";
			//	break;
			//}
			//case LEX_ISFALSE:// условие неверно (переход по метке)
			//{
			//	str = str + "wrong" + itoS(conditionnum) + ":";
			//	break;
			//}
			//case LEX_CYCLE:// цикл с условием (метка)
			//{
			//	str = str + "cycle" + itoS(conditionnum) + ":";
			//	break;
			//}
			case LEX_RIGHTBRACE: {
				if (condition) {
					str = str + "\nmov eax, 1 ";
					str = str + "\njz osn" + to_string(conditOmount) + ": ";
				}
				else {
					str = str + "\nosn" + to_string(conditOmount) + ": ";
				}
				condition = false;
				break;
			}
			case LEX_CONDITION: // условие
			{
				conditOmount++;
				str = genConditionCode(lextable, idtable, i, cyclecode);
				condition = true;
				break;
			}
			case LEX_LEFTBRACE:// переход на метку в конце критерия
			{
				//if (LEXEMA(i + 1) == LEX_ISFALSE || LEXEMA(i + 1) == LEX_ISTRUE)
				if (condition) {
					str = str + "\nright" + to_string(conditOmount) + ": ";
					
				}
					
				//str = str + "jmp next" + itoS(conditionnum);
				break;
			}
			case LEX_ELSE: {
				str = str + "\nwrong" + to_string(conditOmount)+": ";
				break;
			}
			case '=':// присваивание (вычисление выражений)
			{
				if (LEXEMA(i + 1) != '=' && LEXEMA(i - 1) != '=' && LEXEMA(i - 1) != '<' && LEXEMA(i - 1) != '>' && LEXEMA(i - 1) != '!') {
					str = genEqualCode(lextable, idtable, i);
					while (LEXEMA(++i) != LEX_SEMICOLON);// POLISH LEX_SEMICOLON
				
				}
				break;
			}
			case LEX_NEWLINE:// перевод строки
			{
				str = str + "push offset newline\ncall outstr\n";
				break;
			}
			case LEX_PRINT:// вывод в консоль
			{
				IT::Entry e = ITENTRY(i + 1);
				switch (e.iddatatype)
				{
				case IT::IDDATATYPE::INT:// вывод целочисленного литерала
					str = str + "\npush " + e.id + "\ncall outnum\n";
					break;
				case IT::IDDATATYPE::STR:// вывод строкового литерала
					if (e.idtype == IT::IDTYPE::L) str = str + "\npush offset " + e.id + "\ncall outstr\n";
					else str = str + "\npush " + e.id + "\ncall outstr\n";
					break;
				}
				break;
			}
			

			}
			if (!str.empty() && lextable.table[i].lexema!=' ')
				v.push_back(str);
			str.clear();// очистка
		}

		v.push_back(END);
		for (auto x : v)// потоковая запись в файл .asm
			ofile << x << endl;
		ofile.close();
	};
}